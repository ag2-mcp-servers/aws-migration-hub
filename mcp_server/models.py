# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:27:22+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class ApplicationId(
    RootModel[constr(pattern=r'^.{1,1600}$', min_length=1, max_length=1600)]
):
    root: constr(pattern=r'^.{1,1600}$', min_length=1, max_length=1600)


class ApplicationIds(RootModel[List[ApplicationId]]):
    root: List[ApplicationId] = Field(..., max_length=100, min_length=1)


class ApplicationStatus(Enum):
    NOT_STARTED = 'NOT_STARTED'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'


class AssociateCreatedArtifactResult(BaseModel):
    pass


class AssociateDiscoveredResourceResult(BaseModel):
    pass


class ConfigurationId(
    RootModel[constr(pattern=r'^.{1,1600}$', min_length=1, max_length=1600)]
):
    root: constr(pattern=r'^.{1,1600}$', min_length=1, max_length=1600)


class CreateProgressUpdateStreamResult(BaseModel):
    pass


class CreatedArtifactDescription(
    RootModel[constr(pattern=r'^.{0,500}$', min_length=0, max_length=500)]
):
    root: constr(pattern=r'^.{0,500}$', min_length=0, max_length=500)


class CreatedArtifactName(
    RootModel[
        constr(
            pattern=r'arn:[a-z-]+:[a-z0-9-]+:(?:[a-z0-9-]+|):(?:[0-9]{12}|):.*',
            min_length=1,
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'arn:[a-z-]+:[a-z0-9-]+:(?:[a-z0-9-]+|):(?:[0-9]{12}|):.*',
        min_length=1,
        max_length=1600,
    )


class DeleteProgressUpdateStreamResult(BaseModel):
    pass


class DescribeApplicationStateRequest(BaseModel):
    ApplicationId_1: ApplicationId = Field(..., alias='ApplicationId')


class DisassociateCreatedArtifactResult(BaseModel):
    pass


class DisassociateDiscoveredResourceResult(BaseModel):
    pass


class DiscoveredResourceDescription(
    RootModel[constr(pattern=r'^.{0,500}$', min_length=0, max_length=500)]
):
    root: constr(pattern=r'^.{0,500}$', min_length=0, max_length=500)


class DryRun(RootModel[bool]):
    root: bool


class DryRunOperation(RootModel[Any]):
    root: Any


class HomeRegionNotSetException(RootModel[Any]):
    root: Any


class ImportMigrationTaskResult(BaseModel):
    pass


class InternalServerError(RootModel[Any]):
    root: Any


class InvalidInputException(RootModel[Any]):
    root: Any


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaxResultsCreatedArtifacts(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class MaxResultsResources(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class MigrationTaskName(
    RootModel[constr(pattern=r'[^:|]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[^:|]+', min_length=1, max_length=256)


class NextUpdateSeconds(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class NotifyApplicationStateResult(BaseModel):
    pass


class NotifyMigrationTaskStateResult(BaseModel):
    pass


class PolicyErrorException(RootModel[Any]):
    root: Any


class ProgressPercent(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class ProgressUpdateStream(
    RootModel[constr(pattern=r'[^/:|\000-\037]+', min_length=1, max_length=50)]
):
    root: constr(pattern=r'[^/:|\000-\037]+', min_length=1, max_length=50)


class ProgressUpdateStreamSummary(BaseModel):
    ProgressUpdateStreamName: Optional[ProgressUpdateStream] = None


class ProgressUpdateStreamSummaryList(RootModel[List[ProgressUpdateStreamSummary]]):
    root: List[ProgressUpdateStreamSummary]


class PutResourceAttributesResult(BaseModel):
    pass


class ResourceAttributeType(Enum):
    IPV4_ADDRESS = 'IPV4_ADDRESS'
    IPV6_ADDRESS = 'IPV6_ADDRESS'
    MAC_ADDRESS = 'MAC_ADDRESS'
    FQDN = 'FQDN'
    VM_MANAGER_ID = 'VM_MANAGER_ID'
    VM_MANAGED_OBJECT_REFERENCE = 'VM_MANAGED_OBJECT_REFERENCE'
    VM_NAME = 'VM_NAME'
    VM_PATH = 'VM_PATH'
    BIOS_ID = 'BIOS_ID'
    MOTHERBOARD_SERIAL_NUMBER = 'MOTHERBOARD_SERIAL_NUMBER'


class ResourceAttributeValue(
    RootModel[constr(pattern=r'^.{1,256}$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^.{1,256}$', min_length=1, max_length=256)


class ResourceName(
    RootModel[constr(pattern=r'^.{1,1600}$', min_length=1, max_length=1600)]
):
    root: constr(pattern=r'^.{1,1600}$', min_length=1, max_length=1600)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class Status(Enum):
    NOT_STARTED = 'NOT_STARTED'
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'
    COMPLETED = 'COMPLETED'


class StatusDetail(
    RootModel[constr(pattern=r'^.{0,500}$', min_length=0, max_length=500)]
):
    root: constr(pattern=r'^.{0,500}$', min_length=0, max_length=500)


class Task(BaseModel):
    ProgressPercent_1: Optional[ProgressPercent] = Field(None, alias='ProgressPercent')
    Status_1: Status = Field(..., alias='Status')
    StatusDetail_1: Optional[StatusDetail] = Field(None, alias='StatusDetail')


class ThrottlingException(RootModel[Any]):
    root: Any


class Token(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9\/\+\=]{0,2048}$', min_length=0, max_length=2048)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9\/\+\=]{0,2048}$', min_length=0, max_length=2048)


class UnauthorizedOperation(RootModel[Any]):
    root: Any


class UpdateDateTime(RootModel[datetime]):
    root: datetime


class XAmzTarget(Enum):
    AWSMigrationHub_AssociateCreatedArtifact = (
        'AWSMigrationHub.AssociateCreatedArtifact'
    )


class XAmzTarget1(Enum):
    AWSMigrationHub_AssociateDiscoveredResource = (
        'AWSMigrationHub.AssociateDiscoveredResource'
    )


class XAmzTarget2(Enum):
    AWSMigrationHub_CreateProgressUpdateStream = (
        'AWSMigrationHub.CreateProgressUpdateStream'
    )


class XAmzTarget3(Enum):
    AWSMigrationHub_DeleteProgressUpdateStream = (
        'AWSMigrationHub.DeleteProgressUpdateStream'
    )


class XAmzTarget4(Enum):
    AWSMigrationHub_DescribeApplicationState = (
        'AWSMigrationHub.DescribeApplicationState'
    )


class XAmzTarget5(Enum):
    AWSMigrationHub_DescribeMigrationTask = 'AWSMigrationHub.DescribeMigrationTask'


class XAmzTarget6(Enum):
    AWSMigrationHub_DisassociateCreatedArtifact = (
        'AWSMigrationHub.DisassociateCreatedArtifact'
    )


class XAmzTarget7(Enum):
    AWSMigrationHub_DisassociateDiscoveredResource = (
        'AWSMigrationHub.DisassociateDiscoveredResource'
    )


class XAmzTarget8(Enum):
    AWSMigrationHub_ImportMigrationTask = 'AWSMigrationHub.ImportMigrationTask'


class XAmzTarget9(Enum):
    AWSMigrationHub_ListApplicationStates = 'AWSMigrationHub.ListApplicationStates'


class XAmzTarget10(Enum):
    AWSMigrationHub_ListCreatedArtifacts = 'AWSMigrationHub.ListCreatedArtifacts'


class XAmzTarget11(Enum):
    AWSMigrationHub_ListDiscoveredResources = 'AWSMigrationHub.ListDiscoveredResources'


class XAmzTarget12(Enum):
    AWSMigrationHub_ListMigrationTasks = 'AWSMigrationHub.ListMigrationTasks'


class XAmzTarget13(Enum):
    AWSMigrationHub_ListProgressUpdateStreams = (
        'AWSMigrationHub.ListProgressUpdateStreams'
    )


class XAmzTarget14(Enum):
    AWSMigrationHub_NotifyApplicationState = 'AWSMigrationHub.NotifyApplicationState'


class XAmzTarget15(Enum):
    AWSMigrationHub_NotifyMigrationTaskState = (
        'AWSMigrationHub.NotifyMigrationTaskState'
    )


class XAmzTarget16(Enum):
    AWSMigrationHub_PutResourceAttributes = 'AWSMigrationHub.PutResourceAttributes'


class ApplicationState(BaseModel):
    ApplicationId_1: Optional[ApplicationId] = Field(None, alias='ApplicationId')
    ApplicationStatus_1: Optional[ApplicationStatus] = Field(
        None, alias='ApplicationStatus'
    )
    LastUpdatedTime: Optional[UpdateDateTime] = None


class ApplicationStateList(RootModel[List[ApplicationState]]):
    root: List[ApplicationState] = Field(..., max_length=1000, min_length=0)


class CreateProgressUpdateStreamRequest(BaseModel):
    DryRun_1: Optional[DryRun] = Field(None, alias='DryRun')
    ProgressUpdateStreamName: ProgressUpdateStream


class CreatedArtifact(BaseModel):
    Description: Optional[CreatedArtifactDescription] = None
    Name: CreatedArtifactName


class CreatedArtifactList(RootModel[List[CreatedArtifact]]):
    root: List[CreatedArtifact]


class DeleteProgressUpdateStreamRequest(BaseModel):
    DryRun_1: Optional[DryRun] = Field(None, alias='DryRun')
    ProgressUpdateStreamName: ProgressUpdateStream


class DescribeApplicationStateResult(BaseModel):
    ApplicationStatus_1: Optional[ApplicationStatus] = Field(
        None, alias='ApplicationStatus'
    )
    LastUpdatedTime: Optional[UpdateDateTime] = None


class DescribeMigrationTaskRequest(BaseModel):
    MigrationTaskName_1: MigrationTaskName = Field(..., alias='MigrationTaskName')
    ProgressUpdateStream_1: ProgressUpdateStream = Field(
        ..., alias='ProgressUpdateStream'
    )


class DisassociateCreatedArtifactRequest(BaseModel):
    CreatedArtifactName_1: CreatedArtifactName = Field(..., alias='CreatedArtifactName')
    DryRun_1: Optional[DryRun] = Field(None, alias='DryRun')
    MigrationTaskName_1: MigrationTaskName = Field(..., alias='MigrationTaskName')
    ProgressUpdateStream_1: ProgressUpdateStream = Field(
        ..., alias='ProgressUpdateStream'
    )


class DisassociateDiscoveredResourceRequest(BaseModel):
    ConfigurationId_1: ConfigurationId = Field(..., alias='ConfigurationId')
    DryRun_1: Optional[DryRun] = Field(None, alias='DryRun')
    MigrationTaskName_1: MigrationTaskName = Field(..., alias='MigrationTaskName')
    ProgressUpdateStream_1: ProgressUpdateStream = Field(
        ..., alias='ProgressUpdateStream'
    )


class DiscoveredResource(BaseModel):
    ConfigurationId_1: ConfigurationId = Field(..., alias='ConfigurationId')
    Description: Optional[DiscoveredResourceDescription] = None


class DiscoveredResourceList(RootModel[List[DiscoveredResource]]):
    root: List[DiscoveredResource]


class ImportMigrationTaskRequest(BaseModel):
    DryRun_1: Optional[DryRun] = Field(None, alias='DryRun')
    MigrationTaskName_1: MigrationTaskName = Field(..., alias='MigrationTaskName')
    ProgressUpdateStream_1: ProgressUpdateStream = Field(
        ..., alias='ProgressUpdateStream'
    )


class ListApplicationStatesRequest(BaseModel):
    ApplicationIds_1: Optional[ApplicationIds] = Field(None, alias='ApplicationIds')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[Token] = None


class ListApplicationStatesResult(BaseModel):
    ApplicationStateList_1: Optional[ApplicationStateList] = Field(
        None, alias='ApplicationStateList'
    )
    NextToken: Optional[Token] = None


class ListCreatedArtifactsRequest(BaseModel):
    MaxResults: Optional[MaxResultsCreatedArtifacts] = None
    MigrationTaskName_1: MigrationTaskName = Field(..., alias='MigrationTaskName')
    NextToken: Optional[Token] = None
    ProgressUpdateStream_1: ProgressUpdateStream = Field(
        ..., alias='ProgressUpdateStream'
    )


class ListCreatedArtifactsResult(BaseModel):
    CreatedArtifactList_1: Optional[CreatedArtifactList] = Field(
        None, alias='CreatedArtifactList'
    )
    NextToken: Optional[Token] = None


class ListDiscoveredResourcesRequest(BaseModel):
    MaxResults: Optional[MaxResultsResources] = None
    MigrationTaskName_1: MigrationTaskName = Field(..., alias='MigrationTaskName')
    NextToken: Optional[Token] = None
    ProgressUpdateStream_1: ProgressUpdateStream = Field(
        ..., alias='ProgressUpdateStream'
    )


class ListDiscoveredResourcesResult(BaseModel):
    DiscoveredResourceList_1: Optional[DiscoveredResourceList] = Field(
        None, alias='DiscoveredResourceList'
    )
    NextToken: Optional[Token] = None


class ListMigrationTasksRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[Token] = None
    ResourceName_1: Optional[ResourceName] = Field(None, alias='ResourceName')


class ListProgressUpdateStreamsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken: Optional[Token] = None


class ListProgressUpdateStreamsResult(BaseModel):
    NextToken: Optional[Token] = None
    ProgressUpdateStreamSummaryList_1: Optional[ProgressUpdateStreamSummaryList] = (
        Field(None, alias='ProgressUpdateStreamSummaryList')
    )


class MigrationTaskSummary(BaseModel):
    MigrationTaskName_1: Optional[MigrationTaskName] = Field(
        None, alias='MigrationTaskName'
    )
    ProgressPercent_1: Optional[ProgressPercent] = Field(None, alias='ProgressPercent')
    ProgressUpdateStream_1: Optional[ProgressUpdateStream] = Field(
        None, alias='ProgressUpdateStream'
    )
    Status_1: Optional[Status] = Field(None, alias='Status')
    StatusDetail_1: Optional[StatusDetail] = Field(None, alias='StatusDetail')
    UpdateDateTime_1: Optional[UpdateDateTime] = Field(None, alias='UpdateDateTime')


class MigrationTaskSummaryList(RootModel[List[MigrationTaskSummary]]):
    root: List[MigrationTaskSummary]


class NotifyApplicationStateRequest(BaseModel):
    ApplicationId_1: ApplicationId = Field(..., alias='ApplicationId')
    DryRun_1: Optional[DryRun] = Field(None, alias='DryRun')
    Status: ApplicationStatus
    UpdateDateTime_1: Optional[UpdateDateTime] = Field(None, alias='UpdateDateTime')


class NotifyMigrationTaskStateRequest(BaseModel):
    DryRun_1: Optional[DryRun] = Field(None, alias='DryRun')
    MigrationTaskName_1: MigrationTaskName = Field(..., alias='MigrationTaskName')
    NextUpdateSeconds_1: NextUpdateSeconds = Field(..., alias='NextUpdateSeconds')
    ProgressUpdateStream_1: ProgressUpdateStream = Field(
        ..., alias='ProgressUpdateStream'
    )
    Task_1: Task = Field(..., alias='Task')
    UpdateDateTime_1: UpdateDateTime = Field(..., alias='UpdateDateTime')


class ResourceAttribute(BaseModel):
    Type: ResourceAttributeType
    Value: ResourceAttributeValue


class ResourceAttributeList(RootModel[List[ResourceAttribute]]):
    root: List[ResourceAttribute] = Field(..., max_length=100, min_length=1)


class AssociateCreatedArtifactRequest(BaseModel):
    CreatedArtifact_1: CreatedArtifact = Field(..., alias='CreatedArtifact')
    DryRun_1: Optional[DryRun] = Field(None, alias='DryRun')
    MigrationTaskName_1: MigrationTaskName = Field(..., alias='MigrationTaskName')
    ProgressUpdateStream_1: ProgressUpdateStream = Field(
        ..., alias='ProgressUpdateStream'
    )


class AssociateDiscoveredResourceRequest(BaseModel):
    DiscoveredResource_1: DiscoveredResource = Field(..., alias='DiscoveredResource')
    DryRun_1: Optional[DryRun] = Field(None, alias='DryRun')
    MigrationTaskName_1: MigrationTaskName = Field(..., alias='MigrationTaskName')
    ProgressUpdateStream_1: ProgressUpdateStream = Field(
        ..., alias='ProgressUpdateStream'
    )


class LatestResourceAttributeList(RootModel[List[ResourceAttribute]]):
    root: List[ResourceAttribute] = Field(..., max_length=100, min_length=0)


class ListMigrationTasksResult(BaseModel):
    MigrationTaskSummaryList_1: Optional[MigrationTaskSummaryList] = Field(
        None, alias='MigrationTaskSummaryList'
    )
    NextToken: Optional[Token] = None


class MigrationTask(BaseModel):
    MigrationTaskName_1: Optional[MigrationTaskName] = Field(
        None, alias='MigrationTaskName'
    )
    ProgressUpdateStream_1: Optional[ProgressUpdateStream] = Field(
        None, alias='ProgressUpdateStream'
    )
    ResourceAttributeList: Optional[LatestResourceAttributeList] = None
    Task_1: Optional[Task] = Field(None, alias='Task')
    UpdateDateTime_1: Optional[UpdateDateTime] = Field(None, alias='UpdateDateTime')


class PutResourceAttributesRequest(BaseModel):
    DryRun_1: Optional[DryRun] = Field(None, alias='DryRun')
    MigrationTaskName_1: MigrationTaskName = Field(..., alias='MigrationTaskName')
    ProgressUpdateStream_1: ProgressUpdateStream = Field(
        ..., alias='ProgressUpdateStream'
    )
    ResourceAttributeList_1: ResourceAttributeList = Field(
        ..., alias='ResourceAttributeList'
    )


class DescribeMigrationTaskResult(BaseModel):
    MigrationTask_1: Optional[MigrationTask] = Field(None, alias='MigrationTask')
